//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use crate::utils::fmt_beijing;
use serde_json::Value as JsonValue;

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "rooms")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub uuid: String,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub max_users: Option<i32>,
    #[sea_orm(default_value_t = DateTimeUtc::default())]
    #[serde(serialize_with = "fmt_beijing")]
    pub created_at: DateTimeUtc,
    #[sea_orm(default_value_t = DateTimeUtc::default())]
    #[serde(serialize_with = "fmt_beijing")]
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::room_messages::Entity")]
    RoomMessages,
}

impl Related<super::room_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoomMessages.def()
    }
}
impl From<Model> for JsonValue {
    fn from(model: Model) -> JsonValue {
        serde_json::to_value(model).unwrap()
    }
}

impl TryFrom<JsonValue> for Model {
    type Error = serde_json::Error;

    fn try_from(value: JsonValue) -> Result<Self, Self::Error> {
        serde_json::from_value(value)
    }
}
impl ActiveModelBehavior for ActiveModel {}
